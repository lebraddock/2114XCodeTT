#include "main.h"
#include "includeStuff.h"
#include "chassisLib.h"
/**
 * Runs the user autonomous code. This function will be started in its own task
 * with the default priority and stack size whenever the robot is enabled via
 * the Field Management System or the VEX Competition Switch in the autonomous
 * mode. Alternatively, this function may be called in initialize or opcontrol
 * for non-competition testing purposes.
 *
 * If the robot is disabled or communications is lost, the autonomous task
 * will be stopped. Re-enabling the robot will restart the task, not re-start it
 * from where it left off.
 */


//arrays

double blueRightArray[270] = {0.009876,0.01269,0.044443,0.079009,0.123452,0.177771,0.241967,0.316038,0.399986,0.493809,0.597509,0.711085,0.834538,0.967866,1.111071,1.264152,1.427109,1.599942,1.782652,1.975237,2.177699,2.390037,2.612251,2.844342,3.086308,3.338151,3.59987,3.871465,4.152936,4.444284,4.745508,5.056607,5.377583,5.708436,6.049164,6.399769,6.76025,7.130606,7.51084,7.900949,8.300935,8.710796,9.130534,9.560148,9.999639,10.449005,10.908248,11.377367,11.856362,12.345233,12.84398,13.352604,13.871104,14.39948,14.937732,15.48586,16.043865,16.611745,17.189502,17.777135,18.374645,18.98203,19.599292,20.22643,20.863444,21.505396,22.147348,22.7893,23.431252,24.073204,24.710218,25.337356,25.954618,26.562003,27.159512,27.747145,28.324902,28.892783,29.450788,29.998916,30.537168,31.065544,31.584044,32.092667,32.591415,33.080286,33.559281,34.0284,34.487643,34.937009,33.86909,32.043703,32.269159,32.47139,32.649147,32.801043,32.92554,33.020935,33.08533,33.116625,33.11249,33.070343,32.987334,32.860322,32.685865,32.460211,32.179306,31.838822,31.434217,30.960829,30.414046,29.789551,29.083677,28.293924,27.419636,26.462901,25.429668,24.331045,23.184693,22.016115,20.859504,19.757723,18.76091,17.923336,17.298463,16.932695,16.858963,17.091622,17.624079,18.429838,19.466652,20.682629,22.022748,23.434447,24.869268,26.288953,27.666732,28.982223,30.222239,31.379372,32.450609,33.436111,34.338218,35.160669,35.908023,36.585244,37.197409,37.749519,38.246376,38.692514,39.092161,39.449231,39.767326,40.049749,40.299524,40.519416,40.711959,40.87947,41.024081,41.147749,41.252283,41.339353,41.410512,41.467201,41.510767,41.542466,41.563475,41.574892,41.577745,41.572987,41.561499,41.544087,41.521472,41.494288,41.463066,41.42822,41.390034,41.348639,41.303988,41.255832,41.203691,41.146818,41.084171,41.014379,40.935708,40.846039,40.742842,40.62317,40.483661,40.32056,40.12976,39.906868,39.647293,39.346367,38.999475,38.602214,38.150557,37.641013,37.070779,36.444042,35.767669,35.043441,34.272484,33.456685,32.604998,31.728615,30.832812,29.921512,28.998697,28.06831,27.134152,26.19982,25.268641,24.343644,23.427534,22.522685,21.631148,20.754659,19.89466,19.052328,18.228594,17.424171,16.639587,15.875203,15.131243,14.407813,13.704922,13.0225,12.360413,11.718478,11.096474,10.494152,9.911243,9.347467,8.802535,8.276158,7.76805,7.277928,6.805519,6.350558,5.912793,5.491982,5.087897,4.700323,4.32906,3.973921,3.63473,3.31133,3.003571,2.71132,2.434454,2.172863,1.926448,1.69512,1.478802,1.277423,1.090926,0.919257,0.762375,0.620241,0.492826,0.380107,0.282063,0.198681,0.12995,0.075862,0.036414,0.011604,0.001429,0};

double blueLeftArray[270] = {0.009876,0.01269,0.044443,0.079009,0.123452,0.177771,0.241967,0.316038,0.399986,0.493809,0.597509,0.711085,0.834538,0.967866,1.111071,1.264152,1.427109,1.599942,1.782652,1.975237,2.177699,2.390037,2.612251,2.844342,3.086308,3.338151,3.59987,3.871465,4.152936,4.444284,4.745508,5.056607,5.377583,5.708436,6.049164,6.399769,6.76025,7.130606,7.51084,7.900949,8.300935,8.710796,9.130534,9.560148,9.999639,10.449005,10.908248,11.377367,11.856362,12.345233,12.84398,13.352604,13.871104,14.39948,14.937732,15.48586,16.043865,16.611745,17.189502,17.777135,18.374645,18.98203,19.599292,20.22643,20.863444,21.505396,22.147348,22.7893,23.431252,24.073204,24.710218,25.337356,25.954618,26.562003,27.159512,27.747145,28.324902,28.892783,29.450788,29.998916,30.537168,31.065544,31.584044,32.092667,32.591415,33.080286,33.559281,34.0284,34.487643,34.937009,36.703883,39.56835,40.182349,40.799818,41.422007,42.050299,42.686233,43.331514,43.988035,44.657898,45.343431,46.047215,46.772097,47.521218,48.298017,49.106244,49.949949,50.833456,51.761305,52.73815,53.768599,54.856964,56.006902,57.220909,58.49963,59.840972,61.238983,62.682551,64.154019,65.627897,67.070014,68.437542,69.680389,70.744339,71.575993,72.128999,72.370472,72.286071,71.88238,71.185864,70.238716,69.092766,67.802977,66.421859,64.989883,63.54528,62.122751,60.742672,59.41823,58.156838,56.961516,55.83211,54.766289,53.760321,52.809655,51.909333,51.054283,50.23951,49.460215,48.711868,47.990243,47.291429,46.611826,45.948133,45.297327,44.656644,44.023551,43.395732,42.771056,42.147565,41.523453,40.897048,40.266799,39.631263,38.989096,38.33904,37.679919,37.010634,36.330158,35.637538,34.931893,34.212417,33.478387,32.729172,31.96424,31.183175,30.385695,29.571669,28.741143,27.894366,27.03182,26.154251,25.2627,24.35854,23.443504,22.519715,21.5897,20.65641,19.723205,18.793843,17.872432,16.963367,16.07124,15.20072,14.356424,13.542755,12.763741,12.022875,11.322959,10.667753,10.060265,9.500641,8.987755,8.519716,8.095518,7.713842,7.371339,7.064086,6.788098,6.539432,6.314286,6.109064,5.920436,5.745375,5.581175,5.425461,5.276185,5.131609,4.99029,4.851054,4.71297,4.575323,4.437588,4.299401,4.160541,4.020901,3.880473,3.739327,3.597596,3.455464,3.313153,3.170911,3.029007,2.887723,2.747346,2.608166,2.470468,2.334537,2.200644,2.069056,1.940024,1.813791,1.690583,1.570616,1.45409,1.341194,1.2321,1.126969,1.025948,0.929172,0.836764,0.748832,0.665477,0.586787,0.512841,0.443706,0.379444,0.320104,0.265731,0.216361,0.172024,0.132745,0.098543,0.069431,0.045421,0.026519,0.01273,0.004057,0.000499,0};

void followBluePath()
{
  int i = 0;
  int startTime = pros::millis();
  int targetTime = pros::millis() + (270 * 10);
  drive.resetLeftEncoder();
  drive.resetRightEncoder();
  while(pros::millis() < targetTime)
  {
    i = (pros::millis() - startTime) / 10;
    drive.setLeftVelocity(-1 * (blueLeftArray[i] + blueLeftArray[i+1]) / 2);
    drive.setRightVelocity(-1 * (blueRightArray[i] + blueRightArray[i+1]) / 2);
    pros::delay(10);
  }
  drive.stopDriveVelocity();
}

void liftHigh()
{
  intakeThing();
  lift.move_absolute(highTower, 100);
  liftDown = false;
}
void liftMed()
{
  intakeThing();
  lift.move_absolute(lowTower, 100);
  liftDown = false;
}
void liftLow()
{
  while(liftSense.get_value() != 1)
  {
    lift.move(-120);
  }
  lift.move(0);
  liftDown = true;
  lift.tare_position();
}

 void trayToggle()
 {
   if(tray == true)
   {
     ttarget = finalPos;
     tray = false;
   }
   else
   {
     ttarget = startPos;
     tray = true;
   }
 }

 void trayControl(void * param)
 {
   int terror;
   int ttotalError = 0;
   int tpower;
   int tsign = 1;
   int tlastSign = 1;


   while(true)
   {
   //tilter pi loop
   terror = ttarget - tilter.get_position();
   ttotalError += terror;
   tsign = signchk(terror);
   if(tsign != tlastSign)
     ttotalError = 0;
   tlastSign = tsign;
   tpower = terror * tkp + tki * ttotalError;
   if(terror > 320)
     tpower = 127;
   tilter.move(tpower);
   pros::delay(20);
    }
 }


void setIntake(int v)
{
  intake1.move(v);
  intake2.move(v);
}


void autonomous()
{
  pros::Task angle (trayControl, (void*)"PROS", TASK_PRIORITY_DEFAULT,
                TASK_STACK_DEPTH_DEFAULT, "Tary");
                drive.resetLeftEncoder();
                drive.resetRightEncoder();

  setIntake(127);
  drive.driveForward(46,30,70);
  setIntake(0);
  followBluePath();
  setIntake(127);
  drive.driveForward(45, 35, 60);
  pros::delay(200);

  setIntake(40);
  drive.turnLeft(150, 25, 18);
  drive.driveForward(49, 40, 45);
  drive.setLeftDrive(10);
  drive.setRightDrive(10);
  setIntake(100);
  ttarget = finalPos;
  pros::delay(400);
  setIntake(0);
  pros::delay(1800);
  ttarget = startPos;
  pros::delay(300);
  setIntake(-127);
  drive.driveBackward(24, 50, 100);

/* setIntake(-127); //fold out
pros::delay(600);
setIntake(127); //begin intakeing
liftLow();
drive.driveForward(44, 45, 60);
setIntake(0);
drive.driveBackward(20 , 45, 60);
drive.turnRight(65, 35, 80);
drive.driveBackward(30, 45, 60);
drive.turnLeft(57, 35, 80);
setIntake(127);
drive.driveForward(32, 45, 60);
setIntake(0);
drive.driveBackward(15, 40, 60);
setIntake(0);
drive.turnLeft(155, 20, 30);
drive.driveForward(18, 20, 60);
setIntake(40);
ttarget = finalPos;
pros::delay(1500);
setIntake(0);
pros::delay(1000);
ttarget = startPos;
pros::delay(800);
setIntake(-127);
drive.driveBackward(24, 50, 100);
*/
}
