#include "main.h"
#include "includeStuff.h"
#include "chassisLib.h"
/**
 * Runs the user autonomous code. This function will be started in its own task
 * with the default priority and stack size whenever the robot is enabled via
 * the Field Management System or the VEX Competition Switch in the autonomous
 * mode. Alternatively, this function may be called in initialize or opcontrol
 * for non-competition testing purposes.
 *
 * If the robot is disabled or communications is lost, the autonomous task
 * will be stopped. Re-enabling the robot will restart the task, not re-start it
 * from where it left off.
 */


//arrays
/*
double blueRightArray[270] = {0.009876,0.01269,0.044443,0.079009,0.123452,0.177771,0.241967,0.316038,0.399986,0.493809,0.597509,0.711085,0.834538,0.967866,1.111071,1.264152,1.427109,1.599942,1.782652,1.975237,2.177699,2.390037,2.612251,2.844342,3.086308,3.338151,3.59987,3.871465,4.152936,4.444284,4.745508,5.056607,5.377583,5.708436,6.049164,6.399769,6.76025,7.130606,7.51084,7.900949,8.300935,8.710796,9.130534,9.560148,9.999639,10.449005,10.908248,11.377367,11.856362,12.345233,12.84398,13.352604,13.871104,14.39948,14.937732,15.48586,16.043865,16.611745,17.189502,17.777135,18.374645,18.98203,19.599292,20.22643,20.863444,21.505396,22.147348,22.7893,23.431252,24.073204,24.710218,25.337356,25.954618,26.562003,27.159512,27.747145,28.324902,28.892783,29.450788,29.998916,30.537168,31.065544,31.584044,32.092667,32.591415,33.080286,33.559281,34.0284,34.487643,34.937009,33.86909,32.043703,32.269159,32.47139,32.649147,32.801043,32.92554,33.020935,33.08533,33.116625,33.11249,33.070343,32.987334,32.860322,32.685865,32.460211,32.179306,31.838822,31.434217,30.960829,30.414046,29.789551,29.083677,28.293924,27.419636,26.462901,25.429668,24.331045,23.184693,22.016115,20.859504,19.757723,18.76091,17.923336,17.298463,16.932695,16.858963,17.091622,17.624079,18.429838,19.466652,20.682629,22.022748,23.434447,24.869268,26.288953,27.666732,28.982223,30.222239,31.379372,32.450609,33.436111,34.338218,35.160669,35.908023,36.585244,37.197409,37.749519,38.246376,38.692514,39.092161,39.449231,39.767326,40.049749,40.299524,40.519416,40.711959,40.87947,41.024081,41.147749,41.252283,41.339353,41.410512,41.467201,41.510767,41.542466,41.563475,41.574892,41.577745,41.572987,41.561499,41.544087,41.521472,41.494288,41.463066,41.42822,41.390034,41.348639,41.303988,41.255832,41.203691,41.146818,41.084171,41.014379,40.935708,40.846039,40.742842,40.62317,40.483661,40.32056,40.12976,39.906868,39.647293,39.346367,38.999475,38.602214,38.150557,37.641013,37.070779,36.444042,35.767669,35.043441,34.272484,33.456685,32.604998,31.728615,30.832812,29.921512,28.998697,28.06831,27.134152,26.19982,25.268641,24.343644,23.427534,22.522685,21.631148,20.754659,19.89466,19.052328,18.228594,17.424171,16.639587,15.875203,15.131243,14.407813,13.704922,13.0225,12.360413,11.718478,11.096474,10.494152,9.911243,9.347467,8.802535,8.276158,7.76805,7.277928,6.805519,6.350558,5.912793,5.491982,5.087897,4.700323,4.32906,3.973921,3.63473,3.31133,3.003571,2.71132,2.434454,2.172863,1.926448,1.69512,1.478802,1.277423,1.090926,0.919257,0.762375,0.620241,0.492826,0.380107,0.282063,0.198681,0.12995,0.075862,0.036414,0.011604,0.001429,0};

double blueLeftArray[270] = {0.009876,0.01269,0.044443,0.079009,0.123452,0.177771,0.241967,0.316038,0.399986,0.493809,0.597509,0.711085,0.834538,0.967866,1.111071,1.264152,1.427109,1.599942,1.782652,1.975237,2.177699,2.390037,2.612251,2.844342,3.086308,3.338151,3.59987,3.871465,4.152936,4.444284,4.745508,5.056607,5.377583,5.708436,6.049164,6.399769,6.76025,7.130606,7.51084,7.900949,8.300935,8.710796,9.130534,9.560148,9.999639,10.449005,10.908248,11.377367,11.856362,12.345233,12.84398,13.352604,13.871104,14.39948,14.937732,15.48586,16.043865,16.611745,17.189502,17.777135,18.374645,18.98203,19.599292,20.22643,20.863444,21.505396,22.147348,22.7893,23.431252,24.073204,24.710218,25.337356,25.954618,26.562003,27.159512,27.747145,28.324902,28.892783,29.450788,29.998916,30.537168,31.065544,31.584044,32.092667,32.591415,33.080286,33.559281,34.0284,34.487643,34.937009,36.703883,39.56835,40.182349,40.799818,41.422007,42.050299,42.686233,43.331514,43.988035,44.657898,45.343431,46.047215,46.772097,47.521218,48.298017,49.106244,49.949949,50.833456,51.761305,52.73815,53.768599,54.856964,56.006902,57.220909,58.49963,59.840972,61.238983,62.682551,64.154019,65.627897,67.070014,68.437542,69.680389,70.744339,71.575993,72.128999,72.370472,72.286071,71.88238,71.185864,70.238716,69.092766,67.802977,66.421859,64.989883,63.54528,62.122751,60.742672,59.41823,58.156838,56.961516,55.83211,54.766289,53.760321,52.809655,51.909333,51.054283,50.23951,49.460215,48.711868,47.990243,47.291429,46.611826,45.948133,45.297327,44.656644,44.023551,43.395732,42.771056,42.147565,41.523453,40.897048,40.266799,39.631263,38.989096,38.33904,37.679919,37.010634,36.330158,35.637538,34.931893,34.212417,33.478387,32.729172,31.96424,31.183175,30.385695,29.571669,28.741143,27.894366,27.03182,26.154251,25.2627,24.35854,23.443504,22.519715,21.5897,20.65641,19.723205,18.793843,17.872432,16.963367,16.07124,15.20072,14.356424,13.542755,12.763741,12.022875,11.322959,10.667753,10.060265,9.500641,8.987755,8.519716,8.095518,7.713842,7.371339,7.064086,6.788098,6.539432,6.314286,6.109064,5.920436,5.745375,5.581175,5.425461,5.276185,5.131609,4.99029,4.851054,4.71297,4.575323,4.437588,4.299401,4.160541,4.020901,3.880473,3.739327,3.597596,3.455464,3.313153,3.170911,3.029007,2.887723,2.747346,2.608166,2.470468,2.334537,2.200644,2.069056,1.940024,1.813791,1.690583,1.570616,1.45409,1.341194,1.2321,1.126969,1.025948,0.929172,0.836764,0.748832,0.665477,0.586787,0.512841,0.443706,0.379444,0.320104,0.265731,0.216361,0.172024,0.132745,0.098543,0.069431,0.045421,0.026519,0.01273,0.004057,0.000499,0};
*/
double blueRightArray[264] =
{0.007923,0.015807,0.035653,0.063383,0.099036,0.142612,0.194111,0.253533,0.320877,0.396145,0.479335,0.570448,0.669484,0.776444,0.891326,1.01413,1.144858,1.283509,1.430082,1.584579,1.746998,1.91734,2.095605,2.281793,2.475904,2.677938,2.887895,3.105774,3.331577,3.565302,3.80695,4.056521,4.314015,4.579432,4.852772,5.134035,5.423221,5.720329,6.02536,6.338315,6.659192,6.987992,7.324715,7.669361,8.02193,8.382421,8.750836,9.127173,9.511433,9.903617,10.303723,10.711752,11.127704,11.551579,11.983376,12.423097,12.87074,13.322345,13.77395,14.225555,14.67716,15.128765,15.58037,16.031975,16.48358,16.935185,16.057673,12.71994,12.949711,13.1722,13.38736,13.595201,13.795802,13.989321,14.17601,14.35359,14.520022,14.676111,14.822818,14.961259,15.092717,15.218646,15.340669,15.460573,15.580298,15.701919,15.827624,15.95968,16.10039,16.252055,16.416915,16.597096,16.794552,17.011012,17.247919,17.506392,17.787185,18.090661,18.416781,18.765106,19.134811,19.524717,19.933325,20.358872,20.799378,21.252709,21.716631,22.188868,22.667149,23.149259,23.633069,24.116575,24.597915,25.075385,25.547453,26.01276,26.470118,26.918508,27.357069,27.785093,28.202009,28.607375,29.000863,29.382247,29.751394,30.108249,30.452826,30.7852,31.105495,31.413878,31.710552,31.993681,32.263449,32.522158,32.770093,33.007548,33.23482,33.452208,33.660008,33.858511,34.047998,34.228739,34.400992,34.564996,34.72097,34.869111,35.009588,35.142542,35.268079,35.386269,35.497139,35.600671,35.696797,35.785394,35.866276,35.939197,36.00384,36.059812,36.106648,36.143796,36.170627,36.186423,36.190385,36.18163,36.159198,36.122055,36.069103,35.999189,35.911123,35.803688,35.67566,35.525832,35.353031,35.156142,34.934134,34.686081,34.411182,34.108782,33.778391,33.419689,33.032542,32.617002,32.173307,31.701872,31.203283,30.678277,30.12773,29.55263,28.957098,28.347827,27.728512,27.100353,26.464526,25.822168,25.174368,24.522154,23.866487,23.208261,22.548291,21.887321,21.226017,20.564971,19.904706,19.245673,18.588263,17.9328,17.282535,16.643069,16.016942,15.404201,14.80486,14.218902,13.646286,13.086952,12.540821,12.007804,11.487798,10.980695,10.48638,10.004735,9.535639,9.078971,8.634609,8.202434,7.782329,7.374178,6.97787,6.593297,6.220356,5.858947,5.508975,5.170349,4.842983,4.526797,4.221714,3.927662,3.644574,3.372387,3.111042,2.860486,2.620668,2.391543,2.173067,1.965203,1.767917,1.581174,1.40495,1.239216,1.083952,0.939137,0.804754,0.680789,0.567229,0.464063,0.371282,0.28888,0.216851,0.15519,0.103895,0.062963,0.032393,0.012183,0.002334,0};

double blueLeftArray[264] =
{0.007923,0.015807,0.035653,0.063383,0.099036,0.142612,0.194111,0.253533,0.320877,0.396145,0.479335,0.570448,0.669484,0.776444,0.891326,1.01413,1.144858,1.283509,1.430082,1.584579,1.746998,1.91734,2.095605,2.281793,2.475904,2.677938,2.887895,3.105774,3.331577,3.565302,3.80695,4.056521,4.314015,4.579432,4.852772,5.134035,5.423221,5.720329,6.02536,6.338315,6.659192,6.987992,7.324715,7.669361,8.02193,8.382421,8.750836,9.127173,9.511433,9.903617,10.303723,10.711752,11.127704,11.551579,11.983376,12.423097,12.87074,13.322345,13.77395,14.225555,14.67716,15.128765,15.58037,16.031975,16.48358,16.935185,18.617498,22.956689,23.630109,24.310809,24.998836,25.69418,26.396762,27.106424,27.822912,28.540584,29.253557,29.961023,30.662024,31.355443,32.039995,32.71423,33.376523,34.025088,34.657986,35.27314,35.868365,36.441395,36.989925,37.511658,38.004353,38.465885,38.894299,39.287871,39.645155,39.965034,40.246754,40.489952,40.694669,40.861342,40.990795,41.08421,41.143082,41.169176,41.164469,41.131097,41.071291,40.987327,40.881475,40.75595,40.612879,40.454267,40.281975,40.097705,39.902991,39.69919,39.48749,39.268911,39.044311,38.814401,38.579751,38.340802,38.097883,37.851219,37.600944,37.347114,37.089712,36.828666,36.563851,36.2951,36.02221,35.742664,35.456278,35.165105,34.868858,34.567243,34.259963,33.94672,33.627217,33.301165,32.968281,32.628295,32.28095,31.926008,31.563247,31.192473,30.813516,30.426234,30.030521,29.626309,29.21357,28.79232,28.36263,27.924623,27.478483,27.024457,26.562863,26.094091,25.618611,25.136971,24.649802,24.157821,23.661829,23.162707,22.661418,22.158994,21.656535,21.155191,20.656156,20.160646,19.669885,19.18508,18.707406,18.237976,17.777823,17.327872,16.888925,16.461636,16.046497,15.643825,15.253756,14.876238,14.511032,14.157722,13.815724,13.484298,13.162571,12.849551,12.545471,12.25156,11.967694,11.692671,11.425315,11.16449,10.909106,10.658136,10.410616,10.165655,9.922436,9.680217,9.438331,9.196184,8.953256,8.709094,8.463309,8.215574,7.966995,7.71989,7.475291,7.23315,6.993455,6.756222,6.521491,6.289324,6.059799,5.833005,5.609045,5.388028,5.170068,4.955284,4.743796,4.535726,4.331195,4.130322,3.933226,3.74002,3.550817,3.365725,3.184847,3.008283,2.836127,2.668471,2.5054,2.346995,2.193333,2.044486,1.90052,1.7615,1.627482,1.498523,1.37467,1.255971,1.142467,1.034198,0.931198,0.833498,0.741127,0.65411,0.57247,0.496227,0.425397,0.359995,0.300034,0.245525,0.196476,0.152894,0.114785,0.082154,0.055003,0.033334,0.01715,0.00645,0.001236,0};


void followBluePath()
{
  int i = 0;
  int startTime = pros::millis();
  int targetTime = pros::millis() + (264 * 10);
  drive.resetLeftEncoder();
  drive.resetRightEncoder();
  while(pros::millis() < targetTime)
  {
    i = (pros::millis() - startTime) / 10;
    drive.setLeftVelocity(-1 * (blueLeftArray[i] + blueLeftArray[i+1]) / 2);
    drive.setRightVelocity(-1 * (blueRightArray[i] + blueRightArray[i+1]) / 2);
    pros::delay(10);
  }
  drive.stopDriveVelocity();
}
void followRedPath()
{
  int i = 0;
  int startTime = pros::millis();
  int targetTime = pros::millis() + (264 * 10);
  drive.resetLeftEncoder();
  drive.resetRightEncoder();
  while(pros::millis() < targetTime)
  {
    i = (pros::millis() - startTime) / 10;
    drive.setRightVelocity(-1 * (blueLeftArray[i] + blueLeftArray[i+1]) / 2);
    drive.setLeftVelocity(-1 * (blueRightArray[i] + blueRightArray[i+1]) / 2);
    pros::delay(10);
  }
  drive.stopDriveVelocity();
}

void liftHigh()
{
  if(isCube() == true)
    intakeThing();
  lift.move_absolute(highTower, 100);
  liftDown = false;
}

void liftMed()
{
  if(isCube() == true)
    intakeThing();
  lift.move_absolute(lowTower, 100);
  liftDown = false;
}
void liftLow()
{
  while(liftSense.get_value() != 1)
  {
    lift.move(-120);
  }
  lift.move(0);
  liftDown = true;
  lift.tare_position();
}

 void trayToggle()
 {
   if(tray == true)
   {
     ttarget = finalPos;
     tray = false;
   }
   else
   {
     ttarget = startPos;
     tray = true;
   }
 }

 void trayControl(void * param)
 {
   int terror;
   int ttotalError = 0;
   int tpower;
   int tsign = 1;
   int tlastSign = 1;


   while(true)
   {
   //tilter pi loop
   terror = ttarget - tilter.get_position();
   ttotalError += terror;
   tsign = signchk(terror);
   if(tsign != tlastSign)
     ttotalError = 0;
   tlastSign = tsign;
   tpower = terror * tkp + tki * ttotalError;
   if(terror > 220)
     tpower = 127;
   tilter.move(tpower);
   pros::delay(20);
    }
 }


void setIntake(int v)
{
  intake1.move(v);
  intake2.move(v);
}

void deploy()
{
  setIntake(-127);
  pros::delay(220);
  ttarget = finalPos;
  setIntake(0);
  pros::delay(50);
  setIntake(85);
  pros::delay(350);
  setIntake(60);
  pros::delay(1000);
    setIntake(0);
    pros::delay(1000);
  ttarget = startPos;

  pros::delay(300);
}


void redStack()
{
  setIntake(-127);
  pros::delay(220);
  setIntake(0);
  pros::delay(150);
  setIntake(127);
  pros::delay(250);
  drive.driveForward(43,30,70);
  setIntake(0);
  followRedPath();
  setIntake(127);
  drive.driveForward(37, 35, 60);
  pros::delay(500);
  setIntake(0);
  drive.turnRight(149, 25, 18);
  drive.driveForward(46, 40, 35);
  setIntake(-127);
  pros::delay(150);
  drive.setLeftDrive(20);
  drive.setRightDrive(20);
  deploy();
  setIntake(-127);
  drive.driveBackward(24, 50, 100);
}

void redCollect()
{

}

void blueStack()
{
  setIntake(-127);
  pros::delay(220);
  setIntake(0);
  pros::delay(150);
  setIntake(127);
  pros::delay(250);
  drive.driveForward(43,30,70);
  setIntake(0);
  followBluePath();
  setIntake(127);
  drive.driveForward(37, 35, 60);
  pros::delay(500);
  setIntake(0);
  drive.turnLeft(149, 25, 18);
  drive.driveForward(46, 40, 35);
  setIntake(-127);
  pros::delay(150);
  drive.setLeftDrive(20);
  drive.setRightDrive(20);
  deploy();
  setIntake(-127);
  drive.driveBackward(24, 50, 100);
}

void blueCollect()
{
  liftHigh();
  drive.driveForward(40, 30, 60);
  pros::delay(200);
  drive.driveBackward(15, 20, 40);
  liftLow();
  setIntake(127);
  drive.driveForward(19, 20, 40);
  pros::delay(1000);
  setIntake(0);
  drive.turnLeft(90, 35, 50);
  setIntake(127);
  drive.driveForward(14, 30, 50);
  pros::delay(1000);
  setIntake(0);
  drive.turnLeft(90, 30, 60);
  setIntake(127);
  drive.driveForward(14, 30, 50);
}

void skills()
{

  liftLow();
  setIntake(127);
  drive.driveForward(41, 30, 50);
  pros::delay(1000);
  setIntake(0);
  drive.turnRight(26, 25, 40);
  liftMed();
  pros::delay(1200);
  drive.driveForward(9, 10, 20);
  setIntake(-90);
  pros::delay(500);
  setIntake(0);
  drive.driveBackward(10, 25, 50);
  liftLow();
  pros::delay(1000);
  drive.turnLeft(150, 20, 40);
  liftMed();
  pros::delay(1200);
  drive.driveForward(14, 20, 30);
  setIntake(-90);
  pros::delay(500);
  setIntake(0);
  drive.driveBackward(10, 20, 30);
  drive.turnRight(90, 30, 50);
  liftLow();
  drive.driveBackward(45, 35, 50);
  drive.turnRight(40, 25, 35);
  setIntake(127);
  drive.driveForward(36, 35, 50);
  pros::delay(1000);
  setIntake(0);
  drive.turnLeft(152, 25, 18);
  drive.driveForward(48, 40, 35);
  setIntake(-127);
  pros::delay(150);
  drive.setLeftDrive(20);
  drive.setRightDrive(20);
  deploy();

  setIntake(-127);
  drive.driveBackward(20, 50, 100);
  drive.turnLeft(170, 30, 40);
  setIntake(127);
  drive.driveForward(16, 40, 70);
  pros::delay(300);
  setIntake(-40);
  pros::delay(330);
  setIntake(0);
  drive.driveBackward(6, 13, 20);
  liftHigh();
  drive.driveForward(12, 16, 20);
  setIntake(-127);
  pros::delay(600);
  setIntake(0);
  drive.driveBackward(8, 23, 40);
  liftLow();
  drive.turnLeft(90, 30, 50);
  drive.driveBackward(20, 13, 30);


  setIntake(127);
  drive.driveForward(96, 42, 60);
  pros::delay(200);
  setIntake(0);
  drive.turnRight(70, 30, 50);
  liftHigh();
  pros::delay(600);
  drive.driveForward(10, 13, 20);
  setIntake(-127);
  pros::delay(500);
  drive.driveBackward(6, 12, 20);
  setIntake(0);
  drive.turnRight(90, 30, 40);
  liftLow();
  drive.driveBackward(24, 35, 60);
  drive.turnRight(33, 30, 50);
  setIntake(127);
  drive.driveForward(30, 35, 60);
  pros::delay(300);
  setIntake(0);
  drive.driveBackward(30, 35,60);
  drive.turnRight(65, 30, 50);
  liftMed();
  drive.driveForward(13, 13, 20);
  setIntake(-127);
  pros::delay(300);
  drive.driveBackward(13, 23, 50);
  drive.turnRight(70, 20, 30);
  drive.driveForward(16, 20, 30);
  deploy();
  setIntake(-127);
  drive.driveBackward(24, 40, 70);
}




void autonomous()
{
  pros::Task angle (trayControl, (void*)"PROS", TASK_PRIORITY_DEFAULT,
                TASK_STACK_DEPTH_DEFAULT, "Tary");
                drive.resetLeftEncoder();
                drive.resetRightEncoder();

  if(autoNum == 1)
    redStack();
  if(autoNum == 2)
    redCollect();
  if(autoNum == 3)
    blueStack();
  if(autoNum == 4)
    blueCollect();
  if(autoNum == 5)
    skills();



}
