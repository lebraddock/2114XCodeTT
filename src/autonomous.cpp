#include "main.h"
#include "includeStuff.h"
#include "chassisLib.h"
/**
 * Runs the user autonomous code. This function will be started in its own task
 * with the default priority and stack size whenever the robot is enabled via
 * the Field Management System or the VEX Competition Switch in the autonomous
 * mode. Alternatively, this function may be called in initialize or opcontrol
 * for non-competition testing purposes.
 *
 * If the robot is disabled or communications is lost, the autonomous task
 * will be stopped. Re-enabling the robot will restart the task, not re-start it
 * from where it left off.
 */


//arrays

double blueRightArray[252] = {0.009952,0.01288,0.044784,0.079617,0.124401,0.179138,0.243826,0.318467,0.40306,0.497605,0.602102,0.716551,0.840953,0.975306,1.119611,1.273869,1.438079,1.61224,1.796354,1.99042,2.194438,2.408409,2.632331,2.866205,3.110032,3.36381,3.627541,3.901224,4.184859,4.478446,4.781985,5.095476,5.418919,5.752315,6.095662,6.448962,6.812214,7.185417,7.568573,7.961681,8.364741,8.777754,9.200718,9.633634,10.076503,10.529324,10.992096,11.464821,11.947498,12.440127,12.942708,13.455241,13.977727,14.510164,15.052554,15.604895,16.162213,16.719531,17.276848,17.834166,18.391484,18.948801,19.506119,20.063437,20.620755,21.178072,21.73539,22.292708,22.850025,23.407343,23.959685,24.502074,25.034512,25.556997,26.06953,26.572111,27.06474,27.547417,28.020142,28.482915,28.935735,29.378604,29.81152,30.234485,30.647497,31.050557,31.443665,31.826821,32.200025,32.563276,32.916576,28.765469,21.836201,21.450566,21.016525,20.535799,20.011575,19.448858,18.854848,18.239287,17.614741,16.996737,16.403685,15.856496,15.377827,14.990939,14.718203,14.579381,14.589902,14.759379,15.090625,15.579355,16.214624,16.979924,17.854745,18.816324,19.841352,20.907418,21.99409,23.0836,24.161161,25.215003,26.236187,27.218303,28.157105,29.049124,29.893213,30.690408,31.44163,32.148403,32.812674,33.436664,34.022764,34.573448,35.091212,35.578536,36.037848,36.471508,36.881795,37.270898,37.640915,37.993849,38.331609,38.656009,38.968765,39.271494,39.565711,39.852815,40.134084,40.410659,40.683524,40.95348,41.221121,41.486796,41.750568,42.01217,42.270954,42.525838,42.77525,43.017072,43.248598,43.466489,43.666756,43.844762,43.995251,44.112421,44.190033,44.221571,44.200438,44.1202,43.974845,43.759061,43.468499,43.100006,42.651796,42.123558,41.516475,40.83316,40.077517,39.254531,38.370019,37.432506,36.45662,35.454739,34.433083,33.397435,32.353052,31.304597,30.256119,29.211058,28.172267,27.142053,26.122228,25.114163,24.11884,23.138906,22.182067,21.253618,20.353191,19.480298,18.63436,17.814741,17.020765,16.251736,15.506954,14.785722,14.087355,13.411192,12.756591,12.122939,11.509653,10.916177,10.341988,9.786593,9.249529,8.730361,8.228683,7.744118,7.276314,6.824942,6.389699,5.970304,5.566497,5.178039,4.804709,4.446303,4.102637,3.773539,3.458854,3.158441,2.872171,2.599929,2.34161,2.09712,1.866375,1.649301,1.445832,1.255911,1.079488,0.916519,0.766968,0.630804,0.508002,0.39854,0.302401,0.219575,0.150049,0.093819,0.050879,0.021227,0.004861,0};

double blueLeftArray[252] = {0.009952,0.01288,0.044784,0.079617,0.124401,0.179138,0.243826,0.318467,0.40306,0.497605,0.602102,0.716551,0.840953,0.975306,1.119611,1.273869,1.438079,1.61224,1.796354,1.99042,2.194438,2.408409,2.632331,2.866205,3.110032,3.36381,3.627541,3.901224,4.184859,4.478446,4.781985,5.095476,5.418919,5.752315,6.095662,6.448962,6.812214,7.185417,7.568573,7.961681,8.364741,8.777754,9.200718,9.633634,10.076503,10.529324,10.992096,11.464821,11.947498,12.440127,12.942708,13.455241,13.977727,14.510164,15.052554,15.604895,16.162213,16.719531,17.276848,17.834166,18.391484,18.948801,19.506119,20.063437,20.620755,21.178072,21.73539,22.292708,22.850025,23.407343,23.959685,24.502074,25.034512,25.556997,26.06953,26.572111,27.06474,27.547417,28.020142,28.482915,28.935735,29.378604,29.81152,30.234485,30.647497,31.050557,31.443665,31.826821,32.200025,32.563276,32.916576,37.658171,45.34909,46.38143,47.442249,48.529824,49.640967,50.770673,51.911743,53.054435,54.18619,55.291485,56.351919,57.346594,58.252864,59.047485,59.708101,60.214965,60.552659,60.711579,60.688914,60.488945,60.12261,59.606403,58.96082,58.208608,57.37306,56.476574,55.53957,54.579808,53.612067,52.648115,51.696889,50.764798,49.856088,48.971561,48.112365,47.280135,46.473953,45.692297,44.933222,44.194508,43.473766,42.768525,42.076288,41.394577,40.720966,40.053093,39.388683,38.725546,38.061585,37.394796,36.723272,36.045198,35.358859,34.662637,33.955018,33.234603,32.500113,31.750407,30.984502,30.201596,29.401095,28.58265,27.746199,26.892007,26.020723,25.133429,24.231699,23.317649,22.393987,21.464054,20.531838,19.601979,18.679735,17.77091,16.881744,16.018757,15.188546,14.397551,13.651784,12.956558,12.316223,11.733934,11.211477,10.749162,10.345804,9.998788,9.704208,9.457078,9.251576,9.081844,8.943205,8.830558,8.737684,8.658796,8.588639,8.522548,8.456472,8.386974,8.311199,8.226841,8.132087,8.025568,7.906301,7.77431,7.631841,7.480881,7.321798,7.155084,6.981314,6.801128,6.615201,6.424228,6.228911,6.029947,5.828019,5.623792,5.417905,5.210973,5.003579,4.796277,4.589592,4.384017,4.180015,3.978021,3.77844,3.58165,3.388004,3.19783,3.01143,2.829086,2.651058,2.477586,2.30889,2.145174,1.986622,1.833406,1.685682,1.543589,1.407257,1.276802,1.152328,1.03393,0.92169,0.815684,0.715976,0.622625,0.535681,0.455186,0.381177,0.313686,0.252738,0.198353,0.150548,0.109337,0.074728,0.046729,0.025343,0.010573,0.002422,0};

void followBluePath()
{
  int i = 0;
  int startTime = pros::millis();
  int targetTime = pros::millis() + (252 * 10);
  drive.resetLeftEncoder();
  drive.resetRightEncoder();
  while(pros::millis() < targetTime)
  {
    i = (pros::millis() - startTime) / 10;
    drive.setLeftVelocity(-1 * (blueLeftArray[i] + blueLeftArray[i+1]) / 2);
    drive.setRightVelocity(-1 * (blueRightArray[i] + blueRightArray[i+1]) / 2);
    pros::delay(10);
  }
  drive.stopDriveVelocity();
}

void liftHigh()
{
  intakeThing();
  lift.move_absolute(highTower, 100);
  liftDown = false;
}
void liftMed()
{
  intakeThing();
  lift.move_absolute(lowTower, 100);
  liftDown = false;
}
void liftLow()
{
  while(liftSense.get_value() != 1)
  {
    lift.move(-120);
  }
  lift.move(0);
  liftDown = true;
  lift.tare_position();
}

 void trayToggle()
 {
   if(tray == true)
   {
     ttarget = finalPos;
     tray = false;
   }
   else
   {
     ttarget = startPos;
     tray = true;
   }
 }

 void trayControl(void * param)
 {
   int terror;
   int ttotalError = 0;
   int tpower;
   int tsign = 1;
   int tlastSign = 1;


   while(true)
   {
   //tilter pi loop
   terror = ttarget - tilter.get_position();
   ttotalError += terror;
   tsign = signchk(terror);
   if(tsign != tlastSign)
     ttotalError = 0;
   tlastSign = tsign;
   tpower = terror * tkp + tki * ttotalError;
   if(terror > 320)
     tpower = 127;
   tilter.move(tpower);
   pros::delay(20);
    }
 }


void setIntake(int v)
{
  intake1.move(v);
  intake2.move(v);
}


void autonomous()
{
  pros::Task angle (trayControl, (void*)"PROS", TASK_PRIORITY_DEFAULT,
                TASK_STACK_DEPTH_DEFAULT, "Tary");
                drive.resetLeftEncoder();
                drive.resetRightEncoder();

  setIntake(127);
  drive.driveForward(46,30,70);
  setIntake(0);
  followBluePath();
  pros::delay(1000);
  setIntake(127);
  drive.driveForward(28, 45, 60);
  drive.turnLeft(145, 25, 60);
  setIntake(0);
  drive.driveForward(50, 40, 60);
  setIntake(40);
  ttarget = finalPos;
  pros::delay(1500);
  setIntake(0);
  pros::delay(1000);
  ttarget = startPos;
  pros::delay(800);
  setIntake(-127);
  drive.driveBackward(24, 50, 100);

/* setIntake(-127); //fold out
pros::delay(600);
setIntake(127); //begin intakeing
liftLow();
drive.driveForward(44, 45, 60);
setIntake(0);
drive.driveBackward(20 , 45, 60);
drive.turnRight(65, 35, 80);
drive.driveBackward(30, 45, 60);
drive.turnLeft(57, 35, 80);
setIntake(127);
drive.driveForward(32, 45, 60);
setIntake(0);
drive.driveBackward(15, 40, 60);
setIntake(0);
drive.turnLeft(155, 20, 30);
drive.driveForward(18, 20, 60);
setIntake(40);
ttarget = finalPos;
pros::delay(1500);
setIntake(0);
pros::delay(1000);
ttarget = startPos;
pros::delay(800);
setIntake(-127);
drive.driveBackward(24, 50, 100);
*/
}
